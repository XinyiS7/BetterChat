from openai import OpenAI, APIResponseimport osimport jsonimport timeimport requestsfrom dotenv import load_dotenvfrom textprogress import make_abstractfrom capp.models import UsrSubmission# 1. 获取 API 密钥load_dotenv()API_KEY = os.getenv("DEEPSEEK_API_KEY")if not API_KEY:    print("⚠️ 错误：找不到环境变量 DEEPSEEK_API_KEY！请先设置它。")    exit(1)# 2. API 端点API_URL = "https://api.deepseek.com/v1/chat/completions"# 最终向api发送信息的程序def send_to_ds(messages, usr_submission, prompt_str="", max_tokens = 8000):    '''    messages = 历史对话，若此前是“缩略模式”，则这里是前文总结，作为ai消息保存；若是“推理模式”，则为全部对话记录    usr_submission = 网页表单提交的最新用户输入，包括mode，不包括历史记录    '''    headers = {        "Authorization": f"Bearer {API_KEY}",        "Content-Type": "application/json"    }    mode = usr_submission.mode    usr_message= usr_submission.usrinput    abstract = usr_submission.abstract    ai_reply = ""    temperature = usr_submission.temperature    # check if we should update system prompt    if prompt_str:        messages[0]["content"] = prompt_str    # check if we have valid usr_message    if not usr_message:        messages = [            {"role": "system", "content": "You are a helpful assistant"},            {"role": "user", "content": "Hello, here is a request test"},        ]    messages.append({"role": "user", "content": usr_message})    payload = {        "model": mode,        "messages": messages,        "temperature": temperature,        "max_tokens": max_tokens    }    try:        print("⏳ 正在向 DeepSeek API 发送请求...")        start_time = time.time()        response = requests.post(API_URL, headers=headers, json=payload)        response.raise_for_status()  # 检查HTTP错误        end_time = time.time()        print(f"✅ 收到响应！耗时: {end_time - start_time:.2f}秒")    except requests.exceptions.RequestException as e:        print(f"⚠️ 网络请求错误: {str(e)}")        return None    except json.JSONDecodeError:        print("⚠️ 响应解析错误")        return None    ai_reply = response["choices"][0]["message"]["content"]    print(response.choices[0].message.content)    # check if we should make an abstract for ai_reply and user input    if abstract:        ai_reply_abs = make_abstract(ai_reply)        messages.append({"role": "assistant", "content": ai_reply_abs})    else:        messages.append({"role": "assistant", "content": ai_reply})    return 0# run local .py testif __name__ == "__main_-":    usr_submission = UsrSubmission()    usr_submission.mode = "deepseek-chat"    usr_submission.abstract = False    usr_submission.temperature = 1.0    usr_submission.keepit = True    usr_submission.usrinput = "Hello, here is a request test"    send_to_ds(usr_submission, prompt_str="", )